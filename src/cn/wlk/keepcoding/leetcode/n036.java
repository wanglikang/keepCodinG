package cn.wlk.keepcoding.leetcode;

import org.junit.Test;

import java.util.Date;

/**
 * 36. 有效的数独
 * https://leetcode-cn.com/problems/valid-sudoku/description/
 * <p>
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 * <p>
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 * 图片url：https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png
 * <p>
 * 上图是一个部分填充的有效的数独。
 * <p>
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 * <p>
 * 示例 1:
 * <p>
 * 输入:
 * [
 * ["5","3",".",".","7",".",".",".","."],
 * ["6",".",".","1","9","5",".",".","."],
 * [".","9","8",".",".",".",".","6","."],
 * ["8",".",".",".","6",".",".",".","3"],
 * ["4",".",".","8",".","3",".",".","1"],
 * ["7",".",".",".","2",".",".",".","6"],
 * [".","6",".",".",".",".","2","8","."],
 * [".",".",".","4","1","9",".",".","5"],
 * [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: true
 * 示例 2:
 * <p>
 * 输入:
 * [
 * ["8","3",".",".","7",".",".",".","."],
 * ["6",".",".","1","9","5",".",".","."],
 * [".","9","8",".",".",".",".","6","."],
 * ["8",".",".",".","6",".",".",".","3"],
 * ["4",".",".","8",".","3",".",".","1"],
 * ["7",".",".",".","2",".",".",".","6"],
 * [".","6",".",".",".",".","2","8","."],
 * [".",".",".","4","1","9",".",".","5"],
 * [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 * 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 说明:
 * <p>
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 */
//done
public class n036 {
    public void reSet(int[] set) {
        for (int i = 0; i < 9; i++) {
            set[i] = 0;
        }
    }

    /**
     * 检查第i行
     */
    public boolean checkrow(char[][] nums, int i, int[] set) {
        reSet(set);
        for (int j = 0; j < 9; j++) {
            if (nums[i][j] != '.') {
                if (set[nums[i][j] - '1'] > 0) {
                    return false;
                } else set[nums[i][j] - '1'] = 1;
            }
        }
        return true;

    }

    /**
     * //检查第i列
     *
     * @param nums
     * @param i
     * @return
     */
    public boolean checkcol(char[][] nums, int i, int[] set) {

        reSet(set);
        for (int j = 0; j < 9; j++) {
            if (nums[j][i] != '.') {
                if (set[nums[j][i] - '1'] > 0) {
                    return false;
                } else set[nums[j][i] - '1'] = 1;
            }
        }
        return true;
    }

    public boolean checkBox(char[][] nums, int i, int j, int[] set) {
        reSet(set);
        int a,b;
        for (a = i; a < i + 3; a++) {
            for (b=j; b < j + 3; b++) {
             //   System.out.print((char)(nums[a][b])+" ");
                if (nums[a][b] != '.') {
                    if (set[nums[a][b] - '1'] > 0) {
                        return false;
                    } else set[nums[a][b] - '1'] = 1;
                }
            }
//            System.out.println();
        }
        return true;
    }

    public boolean isValidSudoku(char[][] board) {
        int[] set = new int[10];
        boolean result = true;

        for (int i = 0; i < 9; i++) {
            result = result && checkrow(board, i, set);
            result = result && checkcol(board, i, set);
            if (!result)
                return result;
        }
        for (int i = 0; i < 9; i += 3) {
            for (int j = 0; j < 9; j += 3) {
                result = result && checkBox(board, i, j, set);
                if (!result)
                    return result;
            }
        }
        return result;
    }

    @Test
    public void test() {
        n036 n = new n036();
        char[][] board = {
                {'8', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};

        char[][] board2 = {
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
        char[][] board3 = {
                {'.', '.', '.', '.', '5', '.', '.', '1', '.'},
                {'.', '4', '.', '3', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '3', '.', '.', '1'},
                {'8', '.', '.', '.', '.', '.', '.', '2', '.'},
                {'.', '.', '2', '.', '7', '.', '.', '.', '.'},
                {'.', '1', '5', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '2', '.', '.', '.'},
                {'.', '2', '.', '9', '.', '.', '.', '.', '.'},
                {'.', '.', '4', '.', '.', '.', '.', '.', '.'}};
        System.out.println(System.currentTimeMillis());
        System.out.println(n.isValidSudoku(board2));
//        int[] set = new int[9];
//        System.out.println(n.checkBox(board3,0,6,set));
        System.out.println(System.currentTimeMillis());
    }

}
